
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>

#ifndef EXO_WIN_1F32C
#define EXO_WIN_1F32C
struct exo_win_1f32c{
    const float * const data;
    const int_fast32_t strides[1];
};
#endif
// window_stmt(
//     n : size,
//     m : size,
//     x : f32[n, m] @DRAM
// )
void window_stmt( void *ctxt, int_fast32_t n, int_fast32_t m, const float* x );


// window_stmt(
//     n : size,
//     m : size,
//     x : f32[n, m] @DRAM
// )
void window_stmt( void *ctxt, int_fast32_t n, int_fast32_t m, const float* x ) {
struct exo_win_1f32c y = (struct exo_win_1f32c){ &x[0], { m } };
float *z = (float*) malloc(n * sizeof(*z));
for (int_fast32_t i = 0; i < n; i++) {
  z[i] = y.data[i * y.strides[0]];
}
free(z);
}

