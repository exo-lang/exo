
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>

#ifndef EXO_WIN_2I8
#define EXO_WIN_2I8
struct exo_win_2i8{
    int8_t * const data;
    const int_fast32_t strides[2];
};
#endif
#ifndef EXO_WIN_2I8C
#define EXO_WIN_2I8C
struct exo_win_2i8c{
    const int8_t * const data;
    const int_fast32_t strides[2];
};
#endif
// stride_assert(
//     n : size,
//     m : size,
//     src : [i8][n, m] @DRAM,
//     dst : [i8][n, 16] @DRAM
// )
void stride_assert( void *ctxt, int_fast32_t n, int_fast32_t m, struct exo_win_2i8c src, struct exo_win_2i8 dst );


// stride_assert(
//     n : size,
//     m : size,
//     src : [i8][n, m] @DRAM,
//     dst : [i8][n, 16] @DRAM
// )
void stride_assert( void *ctxt, int_fast32_t n, int_fast32_t m, struct exo_win_2i8c src, struct exo_win_2i8 dst ) {
EXO_ASSUME(n <= 16);
EXO_ASSUME(m <= 16);
// assert stride(src, 1) == 1
// assert stride(dst, 0) == 16
// assert stride(dst, 1) == 1
for (int_fast32_t i = 0; i < n; i++) {
  for (int_fast32_t j = 0; j < m; j++) {
    dst.data[i * 16 + j] = src.data[i * src.strides[0] + j];
  }
}
}

