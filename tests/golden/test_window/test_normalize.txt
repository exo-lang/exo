
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>

#ifndef EXO_WIN_1F32C
#define EXO_WIN_1F32C
struct exo_win_1f32c{
    const float * const data;
    const int_fast32_t strides[1];
};
#endif
// proj(
//     n : size,
//     m : size,
//     x : f32[n, m] @DRAM,
//     y : f32[m, n] @DRAM
// )
void proj( void *ctxt, int_fast32_t n, int_fast32_t m, const float* x, const float* y );


// dot(
//     m : size,
//     x : [f32][m] @DRAM,
//     y : [f32][m] @DRAM,
//     r : f32 @DRAM
// )
static void dot( void *ctxt, int_fast32_t m, struct exo_win_1f32c x, struct exo_win_1f32c y, float* r );

// dot(
//     m : size,
//     x : [f32][m] @DRAM,
//     y : [f32][m] @DRAM,
//     r : f32 @DRAM
// )
static void dot( void *ctxt, int_fast32_t m, struct exo_win_1f32c x, struct exo_win_1f32c y, float* r ) {
*r = 0.0f;
for (int_fast32_t i = 0; i < m; i++) {
  *r += x.data[i * x.strides[0]] * y.data[i * y.strides[0]];
}
}

// proj(
//     n : size,
//     m : size,
//     x : f32[n, m] @DRAM,
//     y : f32[m, n] @DRAM
// )
void proj( void *ctxt, int_fast32_t n, int_fast32_t m, const float* x, const float* y ) {
EXO_ASSUME(n > 4);
EXO_ASSUME(m > 4);
float xy;
float y2;
dot(ctxt,m,(struct exo_win_1f32c){ &x[m], { 1 } },(struct exo_win_1f32c){ &y[2], { n } },&xy);
dot(ctxt,m,(struct exo_win_1f32c){ &y[3], { n } },(struct exo_win_1f32c){ &x[(2) * m], { 1 } },&y2);
}

