(()=>{
ctxt={}
let access_11=new ArrayBuffer(1,{maxByteLength:16});let access_13=new ArrayBuffer(1,{maxByteLength:16});let body_9=false;let skip_10=false;
if(!($n_1>2))return [1,ctxt,{}];
body_9||=(2<$n_1);skip_10||=(2>=$n_1);
for(let i_2=2;i_2<$n_1;i_2++){
let size_b_3_0=i_2;
let stride_b_3_0=1;
while(Math.imul(size_b_3_0,stride_b_3_0)>access_11.maxByteLength){let temp_12=new ArrayBuffer(access_11.byteLength,{maxByteLength:2*access_11.maxByteLength});for(let i=0;i<access_11.byteLength;i++)temp_12[i]=access_11[i];access_11=temp_12};access_11.resize(Math.max(Math.imul(size_b_3_0,stride_b_3_0),access_11.byteLength));while(Math.imul(size_b_3_0,stride_b_3_0)>access_13.maxByteLength){let temp_14=new ArrayBuffer(access_13.byteLength,{maxByteLength:2*access_13.maxByteLength});for(let i=0;i<access_13.byteLength;i++)temp_14[i]=access_13[i];access_13=temp_14};access_13.resize(Math.max(Math.imul(size_b_3_0,stride_b_3_0),access_13.byteLength));
if(!(size_b_3_0>=0))return [1,ctxt,{}];
let b_3=new Int32Array(Math.imul(size_b_3_0,stride_b_3_0));
access_11[Math.imul((((i_2-1))+(0)),stride_b_3_0)]=1;
if(!(((((i_2-1))+(0)))>=(0)&&((((i_2-1))+(0)))<(size_b_3_0)))return [1,ctxt,{}];
b_3[Math.imul(stride_b_3_0,(((i_2-1))+(0)))]=0;
access_13[Math.imul((((i_2-2))+(0)),stride_b_3_0)]=1;
if(!(((((i_2-2))+(0)))>=(0)&&((((i_2-2))+(0)))<(size_b_3_0)))return [1,ctxt,{}];
b_3[Math.imul(stride_b_3_0,(((i_2-2))+(0)))]=1;
}
return [0,ctxt,{access_11,access_13,body_9,skip_10}];})