
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif



#ifdef __cplusplus
extern "C" {
#endif


/* Required by DRAM */
#ifndef EXO_MEMORY_GLOBAL_DRAM
#define EXO_MEMORY_GLOBAL_DRAM
#include <stdio.h>
#include <stdlib.h>

#endif
/* Required by DRAM */
#ifndef EXO_WIN_1I8C
#define EXO_WIN_1I8C
struct exo_win_1i8c {
    const int8_t * const data;
    const int_fast32_t strides[1];
};
#endif
// foo(
//     n : size,
//     m : size,
//     x : i8 @DRAM
// )
void foo( void *ctxt, int_fast32_t n, int_fast32_t m, int8_t* x );



#ifdef __cplusplus
}
#endif

// foo(
//     n : size,
//     m : size,
//     x : i8 @DRAM
// )
void foo( void *ctxt, int_fast32_t n, int_fast32_t m, int8_t* x ) {
for (int_fast32_t i = 0; i < n; i++) {
  for (int_fast32_t j = 0; j < m; j++) {
    ; // NO-OP
  }
}
for (int_fast32_t i = 0; i < n; i++) {
  int8_t *a = (int8_t*) malloc(n * sizeof(*a));
  for (int_fast32_t j = 0; j < m; j++) {
    *x = a[i];
  }
  free(a);
}
for (int_fast32_t i = 0; i < n; i++) {
  for (int_fast32_t j = 0; j < m; j++) {
    ; // NO-OP
  }
}
}

