
#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>

#ifndef EXO_WIN_1F32
#define EXO_WIN_1F32
struct exo_win_1f32{
    float * const data;
    const int_fast32_t strides[1];
};
#endif
// caller(

// )
void caller( void *ctxt );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H
#include "test.h"

// callee(
//     N : size,
//     A : [f32][N] @DRAM
// )
static void callee( void *ctxt, int_fast32_t N, struct exo_win_1f32 A );

// callee(
//     N : size,
//     A : [f32][N] @DRAM
// )
static void callee( void *ctxt, int_fast32_t N, struct exo_win_1f32 A ) {
for (int_fast32_t i = 0; i < N; i++) {
  A.data[i * A.strides[0]] = 0.0f;
}
}

// caller(

// )
void caller( void *ctxt ) {
float *A = (float*) malloc(100 * sizeof(*A));
callee(ctxt,10,(struct exo_win_1f32){ &A[10], { 1 } });
free(A);
}

