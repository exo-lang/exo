
#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>

#ifndef EXO_WIN_1F32
#define EXO_WIN_1F32
struct exo_win_1f32{
    float * const data;
    const int_fast32_t strides[1];
};
#endif
#ifndef EXO_WIN_1F32C
#define EXO_WIN_1F32C
struct exo_win_1f32c{
    const float * const data;
    const int_fast32_t strides[1];
};
#endif
// memcpy(
//     N : size,
//     A : f32[N] @DRAM,
//     B : f32[N] @DRAM
// )
void memcpy( void *ctxt, int_fast32_t N, float* A, const float* B );

// memcpy_ab(
//     N : size,
//     A : [f32][N] @DRAM,
//     B : [f32][N] @DRAM
// )
void memcpy_ab( void *ctxt, int_fast32_t N, struct exo_win_1f32 A, struct exo_win_1f32c B );

// memcpy_b(
//     N : size,
//     A : f32[N] @DRAM,
//     B : [f32][N] @DRAM
// )
void memcpy_b( void *ctxt, int_fast32_t N, float* A, struct exo_win_1f32c B );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H

#include "test.h"

// memcpy(
//     N : size,
//     A : f32[N] @DRAM,
//     B : f32[N] @DRAM
// )
void memcpy( void *ctxt, int_fast32_t N, float* A, const float* B ) {
for (int_fast32_t i = 0; i < N; i++) {
  A[i] = B[i];
}
}

// memcpy_ab(
//     N : size,
//     A : [f32][N] @DRAM,
//     B : [f32][N] @DRAM
// )
void memcpy_ab( void *ctxt, int_fast32_t N, struct exo_win_1f32 A, struct exo_win_1f32c B ) {
for (int_fast32_t i = 0; i < N; i++) {
  A.data[i * A.strides[0]] = B.data[i * B.strides[0]];
}
}

// memcpy_b(
//     N : size,
//     A : f32[N] @DRAM,
//     B : [f32][N] @DRAM
// )
void memcpy_b( void *ctxt, int_fast32_t N, float* A, struct exo_win_1f32c B ) {
for (int_fast32_t i = 0; i < N; i++) {
  A[i] = B.data[i * B.strides[0]];
}
}

