
#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>


// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H

#include "test.h"

// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x ) {
for (int_fast32_t io = 0; io < ((N + 7) / (8)); io++) {
  for (int_fast32_t ii = 0; ii < 8; ii++) {
    if (8 * io + ii < N) {
      x[8 * io + ii] = 0.0f;
    }
  }
}
}



#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>


// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H

#include "test.h"

// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x ) {
for (int_fast32_t io = 0; io < ((N + 7) / (8)) - 1; io++) {
  for (int_fast32_t ii = 0; ii < 8; ii++) {
    if (8 * io + ii < N) {
      x[8 * io + ii] = 0.0f;
    }
  }
}
for (int_fast32_t io = ((N + 7) / (8)) - 1; io < ((N + 7) / (8)); io++) {
  for (int_fast32_t ii = 0; ii < 8; ii++) {
    if (8 * io + ii < N) {
      x[8 * io + ii] = 0.0f;
    }
  }
}
}



#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>


// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H

#include "test.h"

// foo(
//     N : size,
//     x : f32[N] @DRAM
// )
void foo( void *ctxt, int_fast32_t N, float* x ) {
for (int_fast32_t ioo = 0; ioo < ((((N + 7) / (8)) - 1 + 3) / (4)); ioo++) {
  for (int_fast32_t ioi = 0; ioi < 4; ioi++) {
    if (4 * ioo + ioi < ((N + 7) / (8)) - 1) {
      for (int_fast32_t ii = 0; ii < 8; ii++) {
        if (8 * (4 * ioo + ioi) + ii < N) {
          x[8 * (4 * ioo + ioi) + ii] = 0.0f;
        }
      }
    }
  }
}
for (int_fast32_t io = ((N + 7) / (8)) - 1; io < ((N + 7) / (8)); io++) {
  for (int_fast32_t ii = 0; ii < 8; ii++) {
    if (8 * io + ii < N) {
      x[8 * io + ii] = 0.0f;
    }
  }
}
}


