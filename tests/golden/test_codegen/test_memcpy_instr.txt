#include "bar.h"

#include <string.h>
// bar(
//     n : size,
//     dst : f32[n] @DRAM,
//     src : f32[n] @DRAM
// )
void bar( void *ctxt, int_fast32_t n, float* dst, const float* src ) {
memcpy((dst), (src), (n + 0) * sizeof(float));
}


/* relying on the following instruction..."
memcpy(n,dst,src)
memcpy({dst}, {src}, {n} * sizeof(float));
*/


#pragma once
#ifndef BAR_H
#define BAR_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>


// bar(
//     n : size,
//     dst : f32[n] @DRAM,
//     src : f32[n] @DRAM
// )
void bar( void *ctxt, int_fast32_t n, float* dst, const float* src );



#ifdef __cplusplus
}
#endif
#endif  // BAR_H
