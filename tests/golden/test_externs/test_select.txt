#include "test.h"

int8_t _select_int8_t(int8_t x,int8_t v,int8_t y,int8_t z) {
    if (x < v) return y;
    else return z;
}

// foo(
//     x : i8[16] @DRAM,
//     y : i8[16] @DRAM,
//     z : i8[16] @DRAM
// )
void foo( void *ctxt, const int8_t* x, const int8_t* y, int8_t* z ) {
for (int_fast32_t i = 0; i < 16; i++) {
  z[i] = _select_int8_t((int8_t)x[i] * ((int8_t) 2), (int8_t)y[i], (int8_t)z[i] + y[i], (int8_t)-x[i]);
}
}


#pragma once
#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif


#include <stdio.h>
#include <stdlib.h>


// foo(
//     x : i8[16] @DRAM,
//     y : i8[16] @DRAM,
//     z : i8[16] @DRAM
// )
void foo( void *ctxt, const int8_t* x, const int8_t* y, int8_t* z );



#ifdef __cplusplus
}
#endif
#endif  // TEST_H
